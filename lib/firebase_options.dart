// File generated by FlutterFire CLI.
// ignore_for_file: type=lint
import 'package:firebase_core/firebase_core.dart' show FirebaseOptions;
import 'package:flutter/foundation.dart'
    show defaultTargetPlatform, kIsWeb, TargetPlatform;
import 'package:flutter_dotenv/flutter_dotenv.dart';

/// Default [FirebaseOptions] for use with your Firebase apps.
///
/// Example:
/// ```dart
/// import 'firebase_options.dart';
/// // ...
/// await Firebase.initializeApp(
///   options: DefaultFirebaseOptions.currentPlatform,
/// );
/// ```
class DefaultFirebaseOptions {
  static FirebaseOptions get currentPlatform {
    if (kIsWeb) {
      return web;
    }
    switch (defaultTargetPlatform) {
      case TargetPlatform.android:
        return android;
      case TargetPlatform.iOS:
        throw UnsupportedError(
          'DefaultFirebaseOptions have not been configured for ios - '
          'you can reconfigure this by running the FlutterFire CLI again.',
        );
      case TargetPlatform.macOS:
        return macos;
      case TargetPlatform.windows:
        return windows;
      case TargetPlatform.linux:
        throw UnsupportedError(
          'DefaultFirebaseOptions have not been configured for linux - '
          'you can reconfigure this by running the FlutterFire CLI again.',
        );
      default:
        throw UnsupportedError(
          'DefaultFirebaseOptions are not supported for this platform.',
        );
    }
  }

  static FirebaseOptions get web => FirebaseOptions(
        apiKey: _env('FIREBASE_WEB_API_KEY'),
        appId: _env('FIREBASE_WEB_APP_ID'),
        messagingSenderId: _env('FIREBASE_WEB_MESSAGING_SENDER_ID'),
        projectId: _env('FIREBASE_WEB_PROJECT_ID'),
        authDomain: _env('FIREBASE_WEB_AUTH_DOMAIN'),
        databaseURL: _env('FIREBASE_WEB_DATABASE_URL'),
        storageBucket: _env('FIREBASE_WEB_STORAGE_BUCKET'),
      );

  static FirebaseOptions get android => FirebaseOptions(
        apiKey: _env('FIREBASE_ANDROID_API_KEY'),
        appId: _env('FIREBASE_ANDROID_APP_ID'),
        messagingSenderId: _env('FIREBASE_ANDROID_MESSAGING_SENDER_ID'),
        projectId: _env('FIREBASE_ANDROID_PROJECT_ID'),
        databaseURL: _env('FIREBASE_ANDROID_DATABASE_URL'),
        storageBucket: _env('FIREBASE_ANDROID_STORAGE_BUCKET'),
      );

  static FirebaseOptions get macos => FirebaseOptions(
        apiKey: _env('FIREBASE_MACOS_API_KEY'),
        appId: _env('FIREBASE_MACOS_APP_ID'),
        messagingSenderId: _env('FIREBASE_MACOS_MESSAGING_SENDER_ID'),
        projectId: _env('FIREBASE_MACOS_PROJECT_ID'),
        storageBucket: _env('FIREBASE_MACOS_STORAGE_BUCKET'),
        iosBundleId: _env('FIREBASE_MACOS_IOS_BUNDLE_ID'),
      );

  static FirebaseOptions get windows => FirebaseOptions(
        apiKey: _env('FIREBASE_WINDOWS_API_KEY'),
        appId: _env('FIREBASE_WINDOWS_APP_ID'),
        messagingSenderId: _env('FIREBASE_WINDOWS_MESSAGING_SENDER_ID'),
        projectId: _env('FIREBASE_WINDOWS_PROJECT_ID'),
        authDomain: _env('FIREBASE_WINDOWS_AUTH_DOMAIN'),
        databaseURL: _env('FIREBASE_WINDOWS_DATABASE_URL'),
        storageBucket: _env('FIREBASE_WINDOWS_STORAGE_BUCKET'),
      );

  static String _env(String key) {
    final value = dotenv.env[key];
    if (value == null || value.isEmpty) {
      throw StateError(
        '$key is not set. Please provide it in your .env file.',
      );
    }
    return value;
  }
}
